# Create image based on node image
FROM node:latest as build

# Set working directory
WORKDIR /app
ADD . /app

# Add /app/node_modules/.bin to environment variables
ENV PATH /app/node_modules/.bin:$PATH

# Install all app dependencies
COPY package.json /app/package.json
RUN npm install
RUN npm install react-scripts -g

# Build the app
RUN npm run build

# Create image based on nginx and deploy our built React app
FROM nginx:1.17-alpine

COPY --from=build /app/build /usr/share/nginx/html

# TODO: USE REAL CERT
# Set environment variables for certificate details
ENV SSL_CERT_DIR=/etc/nginx/ssl
ENV DOMAIN=re-mem.com
# Install OpenSSL and any required tools
# Create self-signed cert
# Install OpenSSL
RUN apk add --no-cache openssl && \
    mkdir -p $SSL_CERT_DIR && \
    openssl req -x509 -nodes -days 365 \
        -subj "/C=US/ST=State/L=City/O=Organization/CN=$DOMAIN" \
        -newkey rsa:2048 \
        -keyout $SSL_CERT_DIR/self-signed.key \
        -out $SSL_CERT_DIR/self-signed.crt


RUN rm /etc/nginx/conf.d/default.conf
COPY nginx.conf /etc/nginx/conf.d


# HTTP
EXPOSE 80
# HTTPS
EXPOSE 443


# Hack to get secrets/env variables passed during runtime to work
# Source: https://www.freecodecamp.org/news/how-to-implement-runtime-environment-variables-with-create-react-app-docker-and-nginx-7f9d42a91d70/
# Copy .env file and shell script to container
WORKDIR /usr/share/nginx/html
COPY ./env.sh .
COPY .env .

# Make our shell script executable
RUN chmod +x env.sh

# Start Nginx server
CMD ["/bin/sh", "-c", "/usr/share/nginx/html/env.sh && nginx -g \"daemon off;\""]

# CMD ["nginx", "-g", "daemon off;"]
